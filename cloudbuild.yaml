steps:
  # Step 1: Build with Maven
  - name: 'maven:3.8.4'
    args: ['mvn', 'clean', 'install']

  # Step 2: Build the Docker Image
  - name: gcr.io/cloud-builders/docker
    args: [
      'build', 
      '-t', 
      'gcr.io/shaped-infusion-402417/docker-spring-boot-java-web:latest',
      '.'
    ]

  # Step 3: Push the Docker Image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/shaped-infusion-402417/docker-spring-boot-java-web:latest']

  # Step 4: Scan the container image with AccuKnox and save the report
  - name: 'accuknox/accuknox-container-scan'
    args: [
      'image', 
      '--format', 'json', 
      '--output', '/workspace/accuknox-report.json', 
      '${_IMAGE_URL}:${_IMAGE_TAG}',
    ]
    id: 'accuknox-container-scan'

  # Step 5: Upload the AccuKnox report to Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['cp', '/workspace/accuknox-report.json', 'gs://aditya-cicd-test/accuknox-report.json']
    waitFor: ['accuknox-container-scan']

  # Step 6: Print the AccuKnox container scan results
  - name: 'ubuntu'
    entrypoint: 'cat'
    args: ['/workspace/accuknox-report.json']
    waitFor: ['accuknox-container-scan']

  # Step 7: Forward the logs to the SaaS platform using curl
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'curl --location --request POST "https://${_CSPM_URL}/api/v1/artifact/?tenant_id=${_TENANT_ID}&data_type=TR&save_to_s3=false"  --header "Tenant-Id: 167" --header "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIwNTg0NDgxLCJqdGkiOiJlOTMzZjBiMjRmOTE0ZDEwOGYzY2RlZGI4MGNmMGFmZCIsImlzcyI6ImNzcG0uZGVtby5hY2N1a25veC5jb20ifQ.aZW3andqtR8-mW_CgdzPDUu-Vow2whoOUjpyGxnfUVcfRfiJpkIlATlFDmPhOR3PHc6tJuxxfZBcyxiX4pXcFBMEAtFMUMK3bIA3oOftALuCxLW5W4DS6PzeOXjNZn9_ijadh8d6UJvw4JOAByXRcwu9XNSwICn-pb4BqfIvu7tL_sHRWMFKt4C5Mo97FNr48keXzOeWzy4TiqMCwTKBzwtJbBt3NrgvWoTZzpJx1ioWGnVcQRHphDL0xA6OmyZYw5qOEJ5y8yv5rDt0p5JUWD5EiemF8Pq-0_OXBZ0TU-a-4deBWMnwSqO-i2C7cxzA_d0hC1fRcVhJ7PFnALFXcA" --form "file=@/workspace/accuknox-report.json"'
      ]
    waitFor: ['accuknox-container-scan']

  # Step 8: If there are critical or high vulnerabilities, stop deployment
  - name: 'bash'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'if grep -q "CRITICAL\|HIGH" /workspace/accuknox-report.json; then exit 0; else exit 1; fi'
      ]
    waitFor: ['accuknox-container-scan']

  # Step 9: Apply Kubernetes Configuration
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-west1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=gke-cluster-gcb-security-bu'
    waitFor: ['accuknox-container-scan']

  # Step 10: Update the Deployment Image
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'set', 
      'image', 
      'deployment', 
      'spring-boot-java-web', 
      'spring-boot-java-web=gcr.io/shaped-infusion-402417/docker-spring-boot-java-web:latest'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-west1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=gke-cluster-gcb-security-bu'
    waitFor: ['accuknox-container-scan']

# Push the image to Google Container Registry with the latest tag
images: [
   'gcr.io/shaped-infusion-402417/docker-spring-boot-java-web:latest'
]

# Specify the logs bucket and build timeout
logsBucket: 'gs://aditya-cicd-test'
timeout: '1200s'

# Define substitutions
substitutions:
  _IMAGE_URL: 'gcr.io/shaped-infusion-402417/docker-spring-boot-java-web'
  _IMAGE_TAG: 'latest'
  _CSPM_URL: 'cspm.demo.accuknox.com'
  _TENANT_ID: '167'
